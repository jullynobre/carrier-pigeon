class Box:
    private demux_semaphore
    private max_capacity_semaphore
    private pigeon_load_semaphore.up()

    private pigeon_capacity
    private uncounted_letters


    fun constructor (val max_capacity = 20):
        this.max_capacity_semaphore = Semaphore(max_capacity)
        this.demux_semaphore = Semaphore(1)
        this.pigeon_load_semaphore.up() = Semaphore(0)

        this.uncounted_letters = 0
        this.pigeon_capacity = 0


    fun insert_messenge():
        this.max_capacity_semaphore.down()
        this.demux_semaphore.down()

        if this.pigeon_capacity != 0 and this.uncounted_letters == this.pigeon_capacity:
            this.pigeon_load_semaphore.up()
            this.uncounted_letters = 0
        else:
            this.uncounted_letters ++

        this.demux_semaphore.up()


    fun pull_mesenges():
        if this.pigeon_capacity == 0:
            print("É necessário registrar um pombo")
        else:
            this.pigeon_load_semaphore.down()

            for 0..this.pigeon_capacity:
                this.max_capacity_semaphore.up()


    fun register_pigeon(pigeon_capacity):
        this.pigeon_capacity = pigeon_capacity
        
        for i in 0..this.uncounted_letters.integer_division(this.pigeon_capacity):
            this.pigeon_load_semaphore.up()

        this.uncounted_letters = this.uncounted_letters % this.pigeon_capacity


class Writer extends Thread:
    private te // time to write a messenges
    private box
    private animations: Animations // animations for writer
    private fired = false


    fun constructor (val te, val box: Box):
        this.te = te
        this.box = box
        this.fired = false


    fun start_writing():
        while not this.fired:

            var end_action = Time.now() + te
            while Time.now() > end_action:
                this.animations.writing()

            this.animations.done_writing()
            this.box.insert_messenge()


    fun fire() = this.fired = true


class Pegeon extends Thread:
    private n      // pigeon capacity
    private tc     // time to load messenges from the box on the pigeon
    private tv     // time of flight
    private td     // time to unload the pegeon
    private fired  // flag for ending this thread
    private box
    private animations: Animations // animations for writer


    fun constructor (val n, val tc, val tv, val td, val box):
        this.n = n 
        this.tc = tc 
        this.tv = tv 
        this.td = td 
        this.fired = false
        this.box = box

        box.register_pigeon(n)


    fun start_job ():
        while not this.fired:
            this.animations.wating_messenges()
            this.box.pull_mesenges()

            var end_action = Time.now() + tv
            while Time.now() < end_action: this.animations.flying()

            end_action += td
            while Time.now() < end_action: this.animations.unloading()

            end_action += tv
            while Time.now() < end_action: this.animations.flying_back()
    
    fun fire() = this.fired = true


class Main:
    fun main():
        val box = Box(max_capacity = 30)
        val pegeon = Pegeon(n = 5, tc = 1, tv = 10, td = 2, box)

        val writers = [Writer(20, box), Writer(15, box), Writer(21, box)]

        pegeon.start_job()
        for w in writers: w.write()
